<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
// if (!extension_loaded('cqpid')) {
//   if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
//     if (!dl('php_cqpid.dll')) return;
//   } else {
//     // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
//     if (PHP_SHLIB_SUFFIX === 'dylib') {
//       if (!dl('cqpid.so')) return;
//     } else {
//       if (!dl('cqpid.'.PHP_SHLIB_SUFFIX)) return;
//     }
//   }
// }




// function encode($content, $message = null) {
//     if ($message === null) {
//         $message = new Message();
//     }
//     qpid_messaging_encode($content, $message);
//     return $message;
// }

// function decode($message) {
//     if ($message->getContentType() == "amqp/list") {
//         return qpid_messaging_decodeList($message);
//     } else {
//         return qpid_messaging_decodeMap($message);
//     }
// }

class Cola_Com_Cqpid {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cqpid_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cqpid_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($impl_or_url=null,$options=null) {
		if (is_resource($impl_or_url) && get_resource_type($impl_or_url) === '_p_qpid__messaging__Connection') {
			$this->_cPtr=$impl_or_url;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_qpid_messaging_Connection(); break;
		case 1: $this->_cPtr=new_qpid_messaging_Connection($impl_or_url); break;
		default: $this->_cPtr=new_qpid_messaging_Connection($impl_or_url,$options);
		}
	}

	function copy($arg1) {
		$r=qpid_messaging_Connection_copy($this->_cPtr,$arg1);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Connection($r);
		}
		return $r;
	}

	function setOption($name,$value) {
		qpid_messaging_Connection_setOption($this->_cPtr,$name,$value);
	}

	function open() {
		qpid_messaging_Connection_open($this->_cPtr);
	}

	function isOpen() {
		return qpid_messaging_Connection_isOpen($this->_cPtr);
	}

	function close() {
		qpid_messaging_Connection_close($this->_cPtr);
	}

	function createTransactionalSession($name=null) {
		switch (func_num_args()) {
		case 0: $r=qpid_messaging_Connection_createTransactionalSession($this->_cPtr); break;
		default: $r=qpid_messaging_Connection_createTransactionalSession($this->_cPtr,$name);
		}
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Session($r);
		}
		return $r;
	}

	function createSession($name=null) {
		switch (func_num_args()) {
		case 0: $r=qpid_messaging_Connection_createSession($this->_cPtr); break;
		default: $r=qpid_messaging_Connection_createSession($this->_cPtr,$name);
		}
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Session($r);
		}
		return $r;
	}

	function getSession($name) {
		$r=qpid_messaging_Connection_getSession($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Session($r);
		}
		return $r;
	}

	function getAuthenticatedUsername() {
		return qpid_messaging_Connection_getAuthenticatedUsername($this->_cPtr);
	}
}


abstract class cqpid {
	static function multiply($duration_or_multiplier,$multiplier_or_duration) {
		$r=multiply($duration_or_multiplier,$multiplier_or_duration);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Duration($r);
		}
		return $r;
	}

	static function decode($message,$map_or_list,$encoding=null) {
		switch (func_num_args()) {
		case 2: qpid_messaging_decode($message,$map_or_list); break;
		default: qpid_messaging_decode($message,$map_or_list,$encoding);
		}
	}

	static function encode($map_or_list,$message,$encoding=null) {
		switch (func_num_args()) {
		case 2: qpid_messaging_encode($map_or_list,$message); break;
		default: qpid_messaging_encode($map_or_list,$message,$encoding);
		}
	}

	static function decodeMap($arg1) {
		return qpid_messaging_decodeMap($arg1);
	}

	static function decodeList($arg1) {
		return qpid_messaging_decodeList($arg1);
	}
}

/* PHP Proxy Classes */
class Address {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cqpid_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cqpid_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($address_or_name=null,$subject=null,$options=null,$type=null) {
		if (is_resource($address_or_name) && get_resource_type($address_or_name) === '_p_qpid__messaging__Address') {
			$this->_cPtr=$address_or_name;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_qpid_messaging_Address(); break;
		case 1: $this->_cPtr=new_qpid_messaging_Address($address_or_name); break;
		case 2: $this->_cPtr=new_qpid_messaging_Address($address_or_name,$subject); break;
		case 3: $this->_cPtr=new_qpid_messaging_Address($address_or_name,$subject,$options); break;
		default: $this->_cPtr=new_qpid_messaging_Address($address_or_name,$subject,$options,$type);
		}
	}

	function copy($arg1) {
		$r=qpid_messaging_Address_copy($this->_cPtr,$arg1);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Address($r);
		}
		return $r;
	}

	function getName() {
		return qpid_messaging_Address_getName($this->_cPtr);
	}

	function setName($arg1) {
		qpid_messaging_Address_setName($this->_cPtr,$arg1);
	}

	function getSubject() {
		return qpid_messaging_Address_getSubject($this->_cPtr);
	}

	function setSubject($arg1) {
		qpid_messaging_Address_setSubject($this->_cPtr,$arg1);
	}

	function getOptions() {
		return qpid_messaging_Address_getOptions($this->_cPtr);
	}

	function setOptions($arg1) {
		qpid_messaging_Address_setOptions($this->_cPtr,$arg1);
	}

	function getType() {
		return qpid_messaging_Address_getType($this->_cPtr);
	}

	function setType($arg1) {
		qpid_messaging_Address_setType($this->_cPtr,$arg1);
	}

	function str() {
		return qpid_messaging_Address_str($this->_cPtr);
	}

	function isValid() {
		return qpid_messaging_Address_isValid($this->_cPtr);
	}

	function isNull() {
		return qpid_messaging_Address_isNull($this->_cPtr);
	}
}

class Duration {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cqpid_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cqpid_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($milliseconds) {
		if (is_resource($milliseconds) && get_resource_type($milliseconds) === '_p_qpid__messaging__Duration') {
			$this->_cPtr=$milliseconds;
			return;
		}
		$this->_cPtr=new_qpid_messaging_Duration($milliseconds);
	}

	function getMilliseconds() {
		return qpid_messaging_Duration_getMilliseconds($this->_cPtr);
	}

	const FOREVER = QPID_MESSAGING_DURATION_FOREVER; static function FOREVER() {
		$r=qpid_messaging_Duration_FOREVER_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Duration($r);
		}
		return $r;
	}

	const IMMEDIATE = QPID_MESSAGING_DURATION_IMMEDIATE; static function IMMEDIATE() {
		$r=qpid_messaging_Duration_IMMEDIATE_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Duration($r);
		}
		return $r;
	}

	const SECOND = QPID_MESSAGING_DURATION_SECOND; static function SECOND() {
		$r=qpid_messaging_Duration_SECOND_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Duration($r);
		}
		return $r;
	}

	const MINUTE = QPID_MESSAGING_DURATION_MINUTE; static function MINUTE() {
		$r=qpid_messaging_Duration_MINUTE_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Duration($r);
		}
		return $r;
	}
}

class Message {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cqpid_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cqpid_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($bytes=null,$arg2=null) {
		if (is_resource($bytes) && get_resource_type($bytes) === '_p_qpid__messaging__Message') {
			$this->_cPtr=$bytes;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_qpid_messaging_Message(); break;
		case 1: $this->_cPtr=new_qpid_messaging_Message($bytes); break;
		default: $this->_cPtr=new_qpid_messaging_Message($bytes,$arg2);
		}
	}

	function copy($arg1) {
		$r=qpid_messaging_Message_copy($this->_cPtr,$arg1);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Message($r);
		}
		return $r;
	}

	function setReplyTo($arg1) {
		qpid_messaging_Message_setReplyTo($this->_cPtr,$arg1);
	}

	function getReplyTo() {
		$r=qpid_messaging_Message_getReplyTo($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Address($r);
		}
		return $r;
	}

	function setSubject($arg1) {
		qpid_messaging_Message_setSubject($this->_cPtr,$arg1);
	}

	function getSubject() {
		return qpid_messaging_Message_getSubject($this->_cPtr);
	}

	function setContentType($arg1) {
		qpid_messaging_Message_setContentType($this->_cPtr,$arg1);
	}

	function getContentType() {
		return qpid_messaging_Message_getContentType($this->_cPtr);
	}

	function setMessageId($arg1) {
		qpid_messaging_Message_setMessageId($this->_cPtr,$arg1);
	}

	function getMessageId() {
		return qpid_messaging_Message_getMessageId($this->_cPtr);
	}

	function setUserId($arg1) {
		qpid_messaging_Message_setUserId($this->_cPtr,$arg1);
	}

	function getUserId() {
		return qpid_messaging_Message_getUserId($this->_cPtr);
	}

	function setCorrelationId($arg1) {
		qpid_messaging_Message_setCorrelationId($this->_cPtr,$arg1);
	}

	function getCorrelationId() {
		return qpid_messaging_Message_getCorrelationId($this->_cPtr);
	}

	function setPriority($arg1) {
		qpid_messaging_Message_setPriority($this->_cPtr,$arg1);
	}

	function getPriority() {
		return qpid_messaging_Message_getPriority($this->_cPtr);
	}

	function setTtl($ttl) {
		qpid_messaging_Message_setTtl($this->_cPtr,$ttl);
	}

	function getTtl() {
		$r=qpid_messaging_Message_getTtl($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Duration($r);
		}
		return $r;
	}

	function setDurable($durable) {
		qpid_messaging_Message_setDurable($this->_cPtr,$durable);
	}

	function getDurable() {
		return qpid_messaging_Message_getDurable($this->_cPtr);
	}

	function getRedelivered() {
		return qpid_messaging_Message_getRedelivered($this->_cPtr);
	}

	function setRedelivered($arg1) {
		qpid_messaging_Message_setRedelivered($this->_cPtr,$arg1);
	}

	function getProperties() {
		return qpid_messaging_Message_getProperties($this->_cPtr);
	}

	function setContent($chars,$count=null) {
		switch (func_num_args()) {
		case 1: qpid_messaging_Message_setContent($this->_cPtr,$chars); break;
		default: qpid_messaging_Message_setContent($this->_cPtr,$chars,$count);
		}
	}

	function getContent() {
		return qpid_messaging_Message_getContent($this->_cPtr);
	}

	function getContentPtr() {
		return qpid_messaging_Message_getContentPtr($this->_cPtr);
	}

	function getContentSize() {
		return qpid_messaging_Message_getContentSize($this->_cPtr);
	}

	function setProperty($arg1,$arg2) {
		qpid_messaging_Message_setProperty($this->_cPtr,$arg1,$arg2);
	}
}

class EncodingException {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cqpid_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cqpid_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($msg) {
		if (is_resource($msg) && get_resource_type($msg) === '_p_qpid__messaging__EncodingException') {
			$this->_cPtr=$msg;
			return;
		}
		$this->_cPtr=new_qpid_messaging_EncodingException($msg);
	}
}

class Receiver {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cqpid_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cqpid_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($impl=null) {
		if (is_resource($impl) && get_resource_type($impl) === '_p_qpid__messaging__Receiver') {
			$this->_cPtr=$impl;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_qpid_messaging_Receiver(); break;
		default: $this->_cPtr=new_qpid_messaging_Receiver($impl);
		}
	}

	function copy($arg1) {
		$r=qpid_messaging_Receiver_copy($this->_cPtr,$arg1);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Receiver($r);
		}
		return $r;
	}

	function get($message_or_timeout=null,$timeout=null) {
		switch (func_num_args()) {
		case 0: $r=qpid_messaging_Receiver_get($this->_cPtr); break;
		case 1: $r=qpid_messaging_Receiver_get($this->_cPtr,$message_or_timeout); break;
		default: $r=qpid_messaging_Receiver_get($this->_cPtr,$message_or_timeout,$timeout);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_qpid__messaging__Message': return new Message($r);
		}
	}

	function fetch($message_or_timeout=null,$timeout=null) {
		switch (func_num_args()) {
		case 0: $r=qpid_messaging_Receiver_fetch($this->_cPtr); break;
		case 1: $r=qpid_messaging_Receiver_fetch($this->_cPtr,$message_or_timeout); break;
		default: $r=qpid_messaging_Receiver_fetch($this->_cPtr,$message_or_timeout,$timeout);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_qpid__messaging__Message': return new Message($r);
		}
	}

	function setCapacity($arg1) {
		qpid_messaging_Receiver_setCapacity($this->_cPtr,$arg1);
	}

	function getCapacity() {
		return qpid_messaging_Receiver_getCapacity($this->_cPtr);
	}

	function getAvailable() {
		return qpid_messaging_Receiver_getAvailable($this->_cPtr);
	}

	function getUnsettled() {
		return qpid_messaging_Receiver_getUnsettled($this->_cPtr);
	}

	function close() {
		qpid_messaging_Receiver_close($this->_cPtr);
	}

	function isClosed() {
		return qpid_messaging_Receiver_isClosed($this->_cPtr);
	}

	function getName() {
		return qpid_messaging_Receiver_getName($this->_cPtr);
	}

	function getSession() {
		$r=qpid_messaging_Receiver_getSession($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Session($r);
		}
		return $r;
	}
}

class Sender {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cqpid_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cqpid_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($impl=null) {
		if (is_resource($impl) && get_resource_type($impl) === '_p_qpid__messaging__Sender') {
			$this->_cPtr=$impl;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_qpid_messaging_Sender(); break;
		default: $this->_cPtr=new_qpid_messaging_Sender($impl);
		}
	}

	function copy($arg1) {
		$r=qpid_messaging_Sender_copy($this->_cPtr,$arg1);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Sender($r);
		}
		return $r;
	}

	function send($message,$sync=false) {
		qpid_messaging_Sender_send($this->_cPtr,$message,$sync);
	}

	function close() {
		qpid_messaging_Sender_close($this->_cPtr);
	}

	function setCapacity($arg1) {
		qpid_messaging_Sender_setCapacity($this->_cPtr,$arg1);
	}

	function getCapacity() {
		return qpid_messaging_Sender_getCapacity($this->_cPtr);
	}

	function getUnsettled() {
		return qpid_messaging_Sender_getUnsettled($this->_cPtr);
	}

	function getAvailable() {
		return qpid_messaging_Sender_getAvailable($this->_cPtr);
	}

	function getName() {
		return qpid_messaging_Sender_getName($this->_cPtr);
	}

	function getSession() {
		$r=qpid_messaging_Sender_getSession($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Session($r);
		}
		return $r;
	}
}

class Session {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cqpid_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cqpid_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($impl=null) {
		if (is_resource($impl) && get_resource_type($impl) === '_p_qpid__messaging__Session') {
			$this->_cPtr=$impl;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_qpid_messaging_Session(); break;
		default: $this->_cPtr=new_qpid_messaging_Session($impl);
		}
	}

	function copy($arg1) {
		$r=qpid_messaging_Session_copy($this->_cPtr,$arg1);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Session($r);
		}
		return $r;
	}

	function close() {
		qpid_messaging_Session_close($this->_cPtr);
	}

	function commit() {
		qpid_messaging_Session_commit($this->_cPtr);
	}

	function rollback() {
		qpid_messaging_Session_rollback($this->_cPtr);
	}

	function acknowledge($sync=null,$sync_=null) {
		switch (func_num_args()) {
		case 0: qpid_messaging_Session_acknowledge($this->_cPtr); break;
		case 1: qpid_messaging_Session_acknowledge($this->_cPtr,$sync); break;
		default: qpid_messaging_Session_acknowledge($this->_cPtr,$sync,$sync_);
		}
	}

	function acknowledgeUpTo($arg1,$sync=false) {
		qpid_messaging_Session_acknowledgeUpTo($this->_cPtr,$arg1,$sync);
	}

	function reject($arg1) {
		qpid_messaging_Session_reject($this->_cPtr,$arg1);
	}

	function release($arg1) {
		qpid_messaging_Session_release($this->_cPtr,$arg1);
	}

	function sync($block=true) {
		qpid_messaging_Session_sync($this->_cPtr,$block);
	}

	function getReceivable() {
		return qpid_messaging_Session_getReceivable($this->_cPtr);
	}

	function getUnsettledAcks() {
		return qpid_messaging_Session_getUnsettledAcks($this->_cPtr);
	}

	function nextReceiver($timeout=null,$timeout_=null) {
		switch (func_num_args()) {
		case 0: $r=qpid_messaging_Session_nextReceiver($this->_cPtr); break;
		case 1: $r=qpid_messaging_Session_nextReceiver($this->_cPtr,$timeout); break;
		default: $r=qpid_messaging_Session_nextReceiver($this->_cPtr,$timeout,$timeout_);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_qpid__messaging__Receiver': return new Receiver($r);
		}
	}

	function createSender($address) {
		$r=qpid_messaging_Session_createSender($this->_cPtr,$address);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Sender($r);
		}
		return $r;
	}

	function createReceiver($address) {
		$r=qpid_messaging_Session_createReceiver($this->_cPtr,$address);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Receiver($r);
		}
		return $r;
	}

	function getSender($name) {
		$r=qpid_messaging_Session_getSender($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Sender($r);
		}
		return $r;
	}

	function getReceiver($name) {
		$r=qpid_messaging_Session_getReceiver($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Receiver($r);
		}
		return $r;
	}

	function getConnection() {
		$r=qpid_messaging_Session_getConnection($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Connection($r);
		}
		return $r;
	}

	function hasError() {
		return qpid_messaging_Session_hasError($this->_cPtr);
	}

	function checkError() {
		qpid_messaging_Session_checkError($this->_cPtr);
	}
}

class FailoverUpdates {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cqpid_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cqpid_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($connection) {
		if (is_resource($connection) && get_resource_type($connection) === '_p_qpid__messaging__FailoverUpdates') {
			$this->_cPtr=$connection;
			return;
		}
		$this->_cPtr=new_qpid_messaging_FailoverUpdates($connection);
	}
}


?>
